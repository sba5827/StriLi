--[[
Autogenerated Test File for AutoRollAnalyser
--]]

package.path = package.path..
package.path:gsub("Framework","FakedFiles")..
package.path:gsub("Tests\\Framework","Lang");
-------------------------------------Define setup code here for fake files here--------------------------------------

--------------------------------------------------End of Setup Code--------------------------------------------------

require("BlizzardFakes");
require("enGB");
require("Language");
require("UnitTest");
require("FakeAutoRollAnalyser");
require("FakeEventHandler");

-----------------------------------------Define generel Test setup code here-----------------------------------------
StriLi.InitLang();
StriLi.EventHandler:init();
local function fakeOnUpdateCall(frame, elapsed)
	frame:OnUpdate(elapsed);
end
--------------------------------------------------End of Setup Code--------------------------------------------------

function TEST_StriLi_AutoRollAnalyser_setItemID()
	UnitTest_vStartTest();

	--Test1
	StriLi.AutoRollAnalyser:setItemID(0)
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.itemID == 0);
	
	--Test2
	StriLi.AutoRollAnalyser:setItemID(65536)
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.itemID == 65536);
	
	--Test3
	StriLi.AutoRollAnalyser.rollInProgress = true;
	StriLi.AutoRollAnalyser:setItemID(0)
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.itemID == 65536);
	
	StriLi.AutoRollAnalyser.rollInProgress = false;

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_setTimeForRolls()
	UnitTest_vStartTest();

	--Test1
	StriLi.AutoRollAnalyser:setTimeForRolls(0)
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.time == 0);
	
	--Test2
	StriLi.AutoRollAnalyser:setTimeForRolls(100)
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.time == 100);
	
	--Test3
	StriLi.AutoRollAnalyser:setTimeForRolls(0.3)
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.time == 0.3);
	
	--Test4
	StriLi.AutoRollAnalyser.rollInProgress = true;
	StriLi.AutoRollAnalyser:setTimeForRolls(10)
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.time == 0.3);
	
	StriLi.AutoRollAnalyser.rollInProgress = false;

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_setItem()
	UnitTest_vStartTest();

	--Test1
	StriLi.AutoRollAnalyser:setItem("itemString");
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.item == "itemString");
	
	--Test2
	StriLi.AutoRollAnalyser.rollInProgress = true;
	StriLi.AutoRollAnalyser:setItem("itemString2");
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser.item == "itemString");
	
	StriLi.AutoRollAnalyser.rollInProgress = false;

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_getRollInProgress()
	UnitTest_vStartTest();

	--Test1
	StriLi.AutoRollAnalyser.rollInProgress = true;
	UnitTest_vTestAssert(StriLi.AutoRollAnalyser:getRollInProgress());
	
	--Test2
	StriLi.AutoRollAnalyser.rollInProgress = false;
	UnitTest_vTestAssert(not StriLi.AutoRollAnalyser:getRollInProgress());

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_start()
	UnitTest_vStartTest();
	local tModule = StriLi.AutoRollAnalyser;

	--Test1 Test initialization
	StriLi.AutoRollAnalyser:setTimeForRolls(10)
	StriLi.AutoRollAnalyser:start()
	UnitTest_vTestAssert(type(GetLastChatMessage()) == "string");
	UnitTest_vTestAssert(GetLastChatMessageType() == "RAID_WARNING");
	UnitTest_vTestAssert(tModule.rollInProgress == true);
	UnitTest_vTestAssert(tModule.rolls["Main"][1] == nil);
	UnitTest_vTestAssert(tModule.rolls["Sec"][1] == nil);
	UnitTest_vTestAssert(tModule.playerRolled[1] == nil);
	UnitTest_vTestAssert(tModule.warn1Done == false);
	UnitTest_vTestAssert(tModule.warn2Done == false);
	UnitTest_vTestAssert(tModule.warn3Done == false);
	
	--Test2 Test OnUpdateFunction
	fakeOnUpdateCall(tModule.timerFrame, 7.0);
	UnitTest_vTestAssert(tModule.time == 3.0);
	UnitTest_vTestAssert(tModule.warn3Done == false);
	
	fakeOnUpdateCall(tModule.timerFrame, 1.0);
	UnitTest_vTestAssert(tModule.time == 2.0);
	UnitTest_vTestAssert(tModule.warn3Done == true);
	UnitTest_vTestAssert(GetLastChatMessage() == "3");
	UnitTest_vTestAssert(GetLastChatMessageType() == "RAID_WARNING");
	UnitTest_vTestAssert(tModule.warn2Done == false);
	
	fakeOnUpdateCall(tModule.timerFrame, 1.0);
	UnitTest_vTestAssert(tModule.time == 1.0);
	UnitTest_vTestAssert(tModule.warn3Done == true);
	UnitTest_vTestAssert(tModule.warn2Done == true);
	UnitTest_vTestAssert(GetLastChatMessage() == "2");
	UnitTest_vTestAssert(GetLastChatMessageType() == "RAID_WARNING");
	UnitTest_vTestAssert(tModule.warn1Done == false);
	
	fakeOnUpdateCall(tModule.timerFrame, 1.0);
	UnitTest_vTestAssert(tModule.time == 0.0);
	UnitTest_vTestAssert(tModule.warn3Done == true);
	UnitTest_vTestAssert(tModule.warn2Done == true);
	UnitTest_vTestAssert(tModule.warn1Done == true);
	UnitTest_vTestAssert(GetLastChatMessage() == "1");
	UnitTest_vTestAssert(GetLastChatMessageType() == "RAID_WARNING");
	
	local fBackupFunction = tModule.finalize;
	local bFunctionWasCalled = false;
	tModule.finalize = function(self) bFunctionWasCalled = true end
	fakeOnUpdateCall(tModule.timerFrame, 1.0);
	UnitTest_vTestAssert(tModule.time == -1.0);
	UnitTest_vTestAssert(tModule.warn3Done == true);
	UnitTest_vTestAssert(tModule.warn2Done == true);
	UnitTest_vTestAssert(tModule.warn1Done == true);
	UnitTest_vTestAssert(GetLastChatMessage() == "---");
	UnitTest_vTestAssert(GetLastChatMessageType() == "RAID_WARNING");
	UnitTest_vTestAssert(bFunctionWasCalled);
	
	tModule.finalize = fBackupFunction;

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_finalize()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_cancelRoll()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_On_CHAT_MSG_SYSTEM()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_registerRoll()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_isNHToken()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_sortRolls()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_shoutWinner()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_shoutRolls()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

function TEST_StriLi_AutoRollAnalyser_increaseWinnerCountAndExpandItemHistory()
	UnitTest_vStartTest();

	--Test1
	UnitTest_vTestAssert(false);

	UnitTest_vFinishTest();
end

UnitTest_vSetupTests();
TEST_StriLi_AutoRollAnalyser_setItemID();
TEST_StriLi_AutoRollAnalyser_setTimeForRolls();
TEST_StriLi_AutoRollAnalyser_setItem();
TEST_StriLi_AutoRollAnalyser_getRollInProgress();
TEST_StriLi_AutoRollAnalyser_start();
TEST_StriLi_AutoRollAnalyser_finalize();
TEST_StriLi_AutoRollAnalyser_cancelRoll();
TEST_StriLi_AutoRollAnalyser_On_CHAT_MSG_SYSTEM();
TEST_StriLi_AutoRollAnalyser_registerRoll();
TEST_StriLi_AutoRollAnalyser_isNHToken();
TEST_StriLi_AutoRollAnalyser_sortRolls();
TEST_StriLi_AutoRollAnalyser_shoutWinner();
TEST_StriLi_AutoRollAnalyser_shoutRolls();
TEST_StriLi_AutoRollAnalyser_increaseWinnerCountAndExpandItemHistory();
UnitTest_vFinalizeTests();
